function distance = new_calibration(params, data_EU, data_USA, F0_EU, B0_EU, F_USA, B0_USA, date_settlement)
% Computation of the function handle for the calibration procedure
% 
% INPUT:
% params:             [VECTOR] parameters that needs to be calibrated, they're written as
%                     [k1, theta1, sigma1, k2, theta2, sigma2]
% data_EU:            [STRUCT] dataset of the European mkt
% data_USA:           [STRUCT] dataset of the American mkt
% F0_EU:              [VECTOR] initial forward F(0, T) EU
% B0_EU:              [VECTOR] initial discount B(0, T) EU
% F_USA:              [VECTOR] initial forward F(0, T) USA
% B0_USA:             [VECTOR] initial discount B(0, T) USA 
% date_settlement:    [DATENUM] settlement date of the computation
% 
% OUTPUT:
% distance:           value to be reduced to 0
% 
% USES:
% 

    %% Unpacking of the parameters

    params_USA = params(1:3);
    params_EU = params(4:6);

    %% Computation of the RMSE

    RMSE_EU = RMSE_total(params_USA, dataset, F0, B0, date_settlement);
    RMSE_EU = RMSE_total(params_EU, data_EU, F0, B0, date_settlement);

    %

    % USA:

    data = data_USA;

    for idx = 1:length(dates_USA)

        put_length = length(data.putAsk);

        % compute the log moneyess from the strikes
        log_moneyness = log(F_0_USA(idx) ./ data.strikes(idx).value);

        % time to maturity
        t = yearfrac(date_settlement,dates_USA(idx),conv_ACT365);

        % create a function that the prices of the call options given the strikes
        if idx <= put_length
            prices_USA = @(p) callIntegral(discount_at_expiry_USA(idx), F_0_USA(idx), p(1), p(2), p(3), t, log_moneyness)-data.strikes(idx).value + data.spot; 
        else
            prices_USA = @(p) callIntegral(discount_at_expiry_USA(idx), F_0_USA(idx), p(1), p(2), p(3), t, log_moneyness);
        end
        
        mean_call_price_USA = (data_USA.callAsk(idx).prices+data_USA.callBid(idx).prices)/2;

        RMSE_USA = @(p) RMSE_USA(p) + sum((prices_USA(p) - mean_call_price_USA).^2);
    end

    RMSE_USA =  @(p) sqrt(RMSE_USA(p))


    weights = [data_EU.spot/(data_EU.spot+data_USA.spot), data_USA.spot/(data_EU.spot+data_USA.spot)];

    dist(p) = weights(1)*RMSE_EU(p) + weights(2)*RMSE_USA(p);

    

end