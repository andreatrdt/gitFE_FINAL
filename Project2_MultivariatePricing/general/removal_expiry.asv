function dataset_renovated = removal_expiry(dataset, idx)
% Removal of a specific expiry after preprocessing decisions
% 
% INPUT:
% dataset:                 [STRUCT] dataset from the mkt
% idx:                     [SCALAR] expiry to remove
% 
% OUTPUT:
% dataset_renovated:       [STRUCT] dataset modified

    
    %% Introductive values
    length_dataset = length(dataset.datesExpiry);

    if idx > length_dataset
        error("Idx required doesn't exist");
    end

    %% Removal of the components and creation of the new dataset

    dataset_renovated = struct();
    
    % Expiries
    new_dates = [dataset.datesExpiry(1:idx-1); dataset.datesExpiry(idx+1:end)];
    dataset_renovated.datesExpiry = new_dates;

    % Call Ask
    new_callAsk = [dataset.callAsk(1:idx-1) dataset.callAsk(idx+1:end)];
    dataset_renovated.callAsk = new_callAsk;

    % Call Bid
    new_callBid = [dataset.callBid(1:idx-1) dataset.callBid(idx+1:end)];
    dataset_renovated.callBid = new_callBid;

    % Put Ask
    new_putAsk = [dataset.putAsk(1:idx-1) dataset.putAsk(idx+1:end)];
    dataset_renovated.putAsk = new_putAsk;

    % Put Bid
    new_putBid = [dataset.putBid(1:idx-1) dataset.putBid(idx+1:end)];
    dataset_renovated.putBid = new_putBid;

    % Volume Call
    new_putBid = [dataset.callAsk(1:idx-1) dataset.callAsk(idx+1:end)];
    dataset_renovated.callAsk = new_putBid;

    % Volu Ask
    new_putBid = [dataset.callAsk(1:idx-1) dataset.callAsk(idx+1:end)];
    dataset_renovated.callAsk = new_putBid;

    % Call Ask
    new_putBid = [dataset.callAsk(1:idx-1) dataset.callAsk(idx+1:end)];
    dataset_renovated.callAsk = new_putBid;

    % Call Ask
    new_putBid = [dataset.callAsk(1:idx-1) dataset.callAsk(idx+1:end)];
    dataset_renovated.callAsk = new_putBid;

    
   




end % function removal_expiry